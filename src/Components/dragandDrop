//this function is currently not avaliable. Soon you can use this feature, keep update :)
function App() {
    const [notes, setNotes] = useState([]);

    function addNote(newNote) {
        setNotes(prevNotes => {
            return [...prevNotes, { ...newNote, id: Date.now() }];
        });
    }

    function deleteNote(id) {
        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));
    }

    function onDragEnd(result) {
        const { source, destination } = result;

        if (!destination) return;
        if (source.index === destination.index) return;

        const reorderedNotes = Array.from(notes);
        const [removed] = reorderedNotes.splice(source.index, 1);
        reorderedNotes.splice(destination.index, 0, removed);

        setNotes(reorderedNotes);
    }

    return (
        <div>
            <Header />
            <CreateArea onAdd={addNote} />
            <DragDropContext onDragEnd={onDragEnd}>
                <Droppable droppableId="notes">
                    {(provided) => (
                        <div
                            {...provided.droppableProps}
                            ref={provided.innerRef}
                            className="notes-container"
                        >
                            {notes.map((note, index) => (
                                <Draggable key={note.id} draggableId={String(note.id)} index={index}>
                                    {(provided) => (
                                        <div
                                            ref={provided.innerRef}
                                            {...provided.draggableProps}
                                            {...provided.dragHandleProps}
                                            className="draggable"
                                        >
                                            <Note
                                                id={note.id}
                                                title={note.title}
                                                content={note.content}
                                                onDelete={deleteNote}
                                            />
                                        </div>
                                    )}
                                </Draggable>
                            ))}
                            {provided.placeholder}
                        </div>
                    )}
                </Droppable>
            </DragDropContext>
            <Footer />
        </div>
    );
}

export default App;
